/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as AuthRouteImport } from './routes/_auth'

const IndexLazyRouteImport = createFileRoute('/')()
const ProtectedSettingsLazyRouteImport = createFileRoute(
  '/_protected/settings',
)()
const ProtectedDashboardLazyRouteImport = createFileRoute(
  '/_protected/dashboard',
)()
const AuthVerifyEmailLazyRouteImport = createFileRoute('/_auth/verify-email')()
const AuthSignupLazyRouteImport = createFileRoute('/_auth/signup')()
const AuthResetPasswordLazyRouteImport = createFileRoute(
  '/_auth/reset-password',
)()
const AuthLoginLazyRouteImport = createFileRoute('/_auth/login')()
const AuthForgotPasswordLazyRouteImport = createFileRoute(
  '/_auth/forgot-password',
)()
const ProtectedSacReimbursementsLazyRouteImport = createFileRoute(
  '/_protected/sac/reimbursements',
)()
const ProtectedCommissionsSettlementsLazyRouteImport = createFileRoute(
  '/_protected/commissions/settlements',
)()
const ProtectedBillingPreSettlementsLazyRouteImport = createFileRoute(
  '/_protected/billing/pre-settlements',
)()
const ProtectedCoreClientsIndexLazyRouteImport = createFileRoute(
  '/_protected/core/clients/',
)()
const ProtectedCoreClientsClientIdLazyRouteImport = createFileRoute(
  '/_protected/core/clients/$clientId',
)()
const ProtectedCoreClientsEditClientIdLazyRouteImport = createFileRoute(
  '/_protected/core/clients/edit/$clientId',
)()

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const ProtectedSettingsLazyRoute = ProtectedSettingsLazyRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected.settings.lazy').then((d) => d.Route),
)
const ProtectedDashboardLazyRoute = ProtectedDashboardLazyRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected.dashboard.lazy').then((d) => d.Route),
)
const AuthVerifyEmailLazyRoute = AuthVerifyEmailLazyRouteImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.verify-email.lazy').then((d) => d.Route),
)
const AuthSignupLazyRoute = AuthSignupLazyRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth.signup.lazy').then((d) => d.Route))
const AuthResetPasswordLazyRoute = AuthResetPasswordLazyRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.reset-password.lazy').then((d) => d.Route),
)
const AuthLoginLazyRoute = AuthLoginLazyRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth.login.lazy').then((d) => d.Route))
const AuthForgotPasswordLazyRoute = AuthForgotPasswordLazyRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.forgot-password.lazy').then((d) => d.Route),
)
const ProtectedSacReimbursementsLazyRoute =
  ProtectedSacReimbursementsLazyRouteImport.update({
    id: '/sac/reimbursements',
    path: '/sac/reimbursements',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected.sac.reimbursements.lazy').then((d) => d.Route),
  )
const ProtectedCommissionsSettlementsLazyRoute =
  ProtectedCommissionsSettlementsLazyRouteImport.update({
    id: '/commissions/settlements',
    path: '/commissions/settlements',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected.commissions.settlements.lazy').then(
      (d) => d.Route,
    ),
  )
const ProtectedBillingPreSettlementsLazyRoute =
  ProtectedBillingPreSettlementsLazyRouteImport.update({
    id: '/billing/pre-settlements',
    path: '/billing/pre-settlements',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected.billing.pre-settlements.lazy').then(
      (d) => d.Route,
    ),
  )
const ProtectedCoreClientsIndexLazyRoute =
  ProtectedCoreClientsIndexLazyRouteImport.update({
    id: '/core/clients/',
    path: '/core/clients/',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected.core.clients.index.lazy').then((d) => d.Route),
  )
const ProtectedCoreClientsClientIdLazyRoute =
  ProtectedCoreClientsClientIdLazyRouteImport.update({
    id: '/core/clients/$clientId',
    path: '/core/clients/$clientId',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected.core.clients.$clientId.lazy').then(
      (d) => d.Route,
    ),
  )
const ProtectedCoreClientsEditClientIdLazyRoute =
  ProtectedCoreClientsEditClientIdLazyRouteImport.update({
    id: '/core/clients/edit/$clientId',
    path: '/core/clients/edit/$clientId',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./routes/_protected.core.clients.edit.$clientId.lazy').then(
      (d) => d.Route,
    ),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/forgot-password': typeof AuthForgotPasswordLazyRoute
  '/login': typeof AuthLoginLazyRoute
  '/reset-password': typeof AuthResetPasswordLazyRoute
  '/signup': typeof AuthSignupLazyRoute
  '/verify-email': typeof AuthVerifyEmailLazyRoute
  '/dashboard': typeof ProtectedDashboardLazyRoute
  '/settings': typeof ProtectedSettingsLazyRoute
  '/billing/pre-settlements': typeof ProtectedBillingPreSettlementsLazyRoute
  '/commissions/settlements': typeof ProtectedCommissionsSettlementsLazyRoute
  '/sac/reimbursements': typeof ProtectedSacReimbursementsLazyRoute
  '/core/clients/$clientId': typeof ProtectedCoreClientsClientIdLazyRoute
  '/core/clients': typeof ProtectedCoreClientsIndexLazyRoute
  '/core/clients/edit/$clientId': typeof ProtectedCoreClientsEditClientIdLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/forgot-password': typeof AuthForgotPasswordLazyRoute
  '/login': typeof AuthLoginLazyRoute
  '/reset-password': typeof AuthResetPasswordLazyRoute
  '/signup': typeof AuthSignupLazyRoute
  '/verify-email': typeof AuthVerifyEmailLazyRoute
  '/dashboard': typeof ProtectedDashboardLazyRoute
  '/settings': typeof ProtectedSettingsLazyRoute
  '/billing/pre-settlements': typeof ProtectedBillingPreSettlementsLazyRoute
  '/commissions/settlements': typeof ProtectedCommissionsSettlementsLazyRoute
  '/sac/reimbursements': typeof ProtectedSacReimbursementsLazyRoute
  '/core/clients/$clientId': typeof ProtectedCoreClientsClientIdLazyRoute
  '/core/clients': typeof ProtectedCoreClientsIndexLazyRoute
  '/core/clients/edit/$clientId': typeof ProtectedCoreClientsEditClientIdLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/_auth/forgot-password': typeof AuthForgotPasswordLazyRoute
  '/_auth/login': typeof AuthLoginLazyRoute
  '/_auth/reset-password': typeof AuthResetPasswordLazyRoute
  '/_auth/signup': typeof AuthSignupLazyRoute
  '/_auth/verify-email': typeof AuthVerifyEmailLazyRoute
  '/_protected/dashboard': typeof ProtectedDashboardLazyRoute
  '/_protected/settings': typeof ProtectedSettingsLazyRoute
  '/_protected/billing/pre-settlements': typeof ProtectedBillingPreSettlementsLazyRoute
  '/_protected/commissions/settlements': typeof ProtectedCommissionsSettlementsLazyRoute
  '/_protected/sac/reimbursements': typeof ProtectedSacReimbursementsLazyRoute
  '/_protected/core/clients/$clientId': typeof ProtectedCoreClientsClientIdLazyRoute
  '/_protected/core/clients/': typeof ProtectedCoreClientsIndexLazyRoute
  '/_protected/core/clients/edit/$clientId': typeof ProtectedCoreClientsEditClientIdLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/verify-email'
    | '/dashboard'
    | '/settings'
    | '/billing/pre-settlements'
    | '/commissions/settlements'
    | '/sac/reimbursements'
    | '/core/clients/$clientId'
    | '/core/clients'
    | '/core/clients/edit/$clientId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/verify-email'
    | '/dashboard'
    | '/settings'
    | '/billing/pre-settlements'
    | '/commissions/settlements'
    | '/sac/reimbursements'
    | '/core/clients/$clientId'
    | '/core/clients'
    | '/core/clients/edit/$clientId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/reset-password'
    | '/_auth/signup'
    | '/_auth/verify-email'
    | '/_protected/dashboard'
    | '/_protected/settings'
    | '/_protected/billing/pre-settlements'
    | '/_protected/commissions/settlements'
    | '/_protected/sac/reimbursements'
    | '/_protected/core/clients/$clientId'
    | '/_protected/core/clients/'
    | '/_protected/core/clients/edit/$clientId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsLazyRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardLazyRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_auth/verify-email': {
      id: '/_auth/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof AuthVerifyEmailLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/reset-password': {
      id: '/_auth/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof AuthResetPasswordLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_protected/sac/reimbursements': {
      id: '/_protected/sac/reimbursements'
      path: '/sac/reimbursements'
      fullPath: '/sac/reimbursements'
      preLoaderRoute: typeof ProtectedSacReimbursementsLazyRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/commissions/settlements': {
      id: '/_protected/commissions/settlements'
      path: '/commissions/settlements'
      fullPath: '/commissions/settlements'
      preLoaderRoute: typeof ProtectedCommissionsSettlementsLazyRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/billing/pre-settlements': {
      id: '/_protected/billing/pre-settlements'
      path: '/billing/pre-settlements'
      fullPath: '/billing/pre-settlements'
      preLoaderRoute: typeof ProtectedBillingPreSettlementsLazyRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/core/clients/': {
      id: '/_protected/core/clients/'
      path: '/core/clients'
      fullPath: '/core/clients'
      preLoaderRoute: typeof ProtectedCoreClientsIndexLazyRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/core/clients/$clientId': {
      id: '/_protected/core/clients/$clientId'
      path: '/core/clients/$clientId'
      fullPath: '/core/clients/$clientId'
      preLoaderRoute: typeof ProtectedCoreClientsClientIdLazyRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/core/clients/edit/$clientId': {
      id: '/_protected/core/clients/edit/$clientId'
      path: '/core/clients/edit/$clientId'
      fullPath: '/core/clients/edit/$clientId'
      preLoaderRoute: typeof ProtectedCoreClientsEditClientIdLazyRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface AuthRouteChildren {
  AuthForgotPasswordLazyRoute: typeof AuthForgotPasswordLazyRoute
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute
  AuthResetPasswordLazyRoute: typeof AuthResetPasswordLazyRoute
  AuthSignupLazyRoute: typeof AuthSignupLazyRoute
  AuthVerifyEmailLazyRoute: typeof AuthVerifyEmailLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordLazyRoute: AuthForgotPasswordLazyRoute,
  AuthLoginLazyRoute: AuthLoginLazyRoute,
  AuthResetPasswordLazyRoute: AuthResetPasswordLazyRoute,
  AuthSignupLazyRoute: AuthSignupLazyRoute,
  AuthVerifyEmailLazyRoute: AuthVerifyEmailLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ProtectedRouteChildren {
  ProtectedDashboardLazyRoute: typeof ProtectedDashboardLazyRoute
  ProtectedSettingsLazyRoute: typeof ProtectedSettingsLazyRoute
  ProtectedBillingPreSettlementsLazyRoute: typeof ProtectedBillingPreSettlementsLazyRoute
  ProtectedCommissionsSettlementsLazyRoute: typeof ProtectedCommissionsSettlementsLazyRoute
  ProtectedSacReimbursementsLazyRoute: typeof ProtectedSacReimbursementsLazyRoute
  ProtectedCoreClientsClientIdLazyRoute: typeof ProtectedCoreClientsClientIdLazyRoute
  ProtectedCoreClientsIndexLazyRoute: typeof ProtectedCoreClientsIndexLazyRoute
  ProtectedCoreClientsEditClientIdLazyRoute: typeof ProtectedCoreClientsEditClientIdLazyRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDashboardLazyRoute: ProtectedDashboardLazyRoute,
  ProtectedSettingsLazyRoute: ProtectedSettingsLazyRoute,
  ProtectedBillingPreSettlementsLazyRoute:
    ProtectedBillingPreSettlementsLazyRoute,
  ProtectedCommissionsSettlementsLazyRoute:
    ProtectedCommissionsSettlementsLazyRoute,
  ProtectedSacReimbursementsLazyRoute: ProtectedSacReimbursementsLazyRoute,
  ProtectedCoreClientsClientIdLazyRoute: ProtectedCoreClientsClientIdLazyRoute,
  ProtectedCoreClientsIndexLazyRoute: ProtectedCoreClientsIndexLazyRoute,
  ProtectedCoreClientsEditClientIdLazyRoute:
    ProtectedCoreClientsEditClientIdLazyRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
